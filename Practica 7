#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <MFRC522.h>
#include <DS3231.h>

#define SS_PIN 10
#define RST_PIN 9
#define columnas 16
#define filas 2   
#define direccion_lcd 0x27 

LiquidCrystal_I2C lcd_henry(0x27, 16, 2);
MFRC522 mfrc522(SS_PIN, RST_PIN);
DS3231 rtc;

const String usuarioRegistrado = "b31628ac"; 
bool usuarioValido = false;

void setup() {
  Serial.begin(9600);
  lcd_henry.begin(16, 2);
  lcd_henry.backlight();
  SPI.begin();
  mfrc522.PCD_Init();
  lcd_henry.setCursor(0, 0);
  lcd_henry.print("EEGSA - Kinal");
  lcd_henry.setCursor(0, 1);
  lcd_henry.print("Medidor de energia");

  Serial.println("Contador de Energia - Iniciado"); // Mensaje inicial en el monitor serial
}

void loop() {
  if (!usuarioValido) {
    validarUsuario();
  } else {
    float corriente = obtenerCorriente();
    float voltaje = obtenerVoltaje();
    Serial.print("Hora de acceso: ");
    Serial.print(rtc.getMinute());
    Serial.print(" - Usuario registrado: ");
    Serial.println(usuarioRegistrado);
    lcd_henry.clear();
    lcd_henry.setCursor(0, 0);
    lcd_henry.print("EEGSA - Kinal");
    lcd_henry.setCursor(0, 1);
    lcd_henry.print("Volt: ");
    lcd_henry.print(voltaje, 2);
    lcd_henry.print("V ");
    lcd_henry.setCursor(6, 1);
    lcd_henry.print("Corr: ");
    lcd_henry.print(corriente, 2);
    lcd_henry.print("A ");
    delay(1000);
    Serial.print("Voltaje: ");
    Serial.print(voltaje, 2);
    Serial.print(" V, Corriente: ");
    Serial.print(corriente, 2);
    Serial.println(" A");
  }
}

void validarUsuario() {
  if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    String rfidTag = "";
    for (byte i = 0; i < mfrc522.uid.size; i++) {
      rfidTag += String(mfrc522.uid.uidByte[i], HEX);
    }

    Serial.print("Tarjeta RFID detectada: ");
    Serial.println(rfidTag); // Muestra la tarjeta RFID en el monitor serial

    if (rfidTag == usuarioRegistrado) {
      usuarioValido = true;
      Serial.println("Usuario válido - Acceso permitido"); // Muestra mensaje de usuario válido
    } else {
      lcd_henry.clear();
      lcd_henry.setCursor(0, 0);
      lcd_henry.print("EEGSA - Kinal");
      lcd_henry.setCursor(0, 1);
      lcd_henry.print("Usuario invalido");
      Serial.println("Usuario inválido - Acceso denegado"); // Muestra mensaje de usuario inválido
      delay(2000);
    }
  }
}

float obtenerCorriente() {
  int lecturaACS712 = analogRead(A0);
  float corriente = map(lecturaACS712, 0, 1023, 0, 5) / 0.185; // Ajustar el factor de escala según la sensibilidad del sensor ACS712
  return corriente;
}

float obtenerVoltaje() {
  int lecturaFZ0430 = analogRead(A1);
  float voltaje = lecturaFZ0430 * 5.0 / 1023.0;
  return voltaje;
}
